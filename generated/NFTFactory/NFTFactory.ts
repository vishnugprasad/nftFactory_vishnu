// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class Offered extends ethereum.Event {
  get params(): Offered__Params {
    return new Offered__Params(this);
  }
}

export class Offered__Params {
  _event: Offered;

  constructor(event: Offered) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class NFTFactory__itemsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNft(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getSeller(): Address {
    return this.value4;
  }

  getSold(): boolean {
    return this.value5;
  }
}

export class NFTFactory extends ethereum.SmartContract {
  static bind(address: Address): NFTFactory {
    return new NFTFactory("NFTFactory", address);
  }

  feeAccount(): Address {
    let result = super.call("feeAccount", "feeAccount():(address)", []);

    return result[0].toAddress();
  }

  try_feeAccount(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAccount", "feeAccount():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feePercent(): BigInt {
    let result = super.call("feePercent", "feePercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePercent", "feePercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPrice(_itemId: BigInt): BigInt {
    let result = super.call(
      "getTotalPrice",
      "getTotalPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_itemId)]
    );

    return result[0].toBigInt();
  }

  try_getTotalPrice(_itemId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPrice",
      "getTotalPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  itemCount(): BigInt {
    let result = super.call("itemCount", "itemCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_itemCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("itemCount", "itemCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  items(param0: BigInt): NFTFactory__itemsResult {
    let result = super.call(
      "items",
      "items(uint256):(uint256,address,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NFTFactory__itemsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBoolean()
    );
  }

  try_items(param0: BigInt): ethereum.CallResult<NFTFactory__itemsResult> {
    let result = super.tryCall(
      "items",
      "items(uint256):(uint256,address,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTFactory__itemsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class MakeItemCall extends ethereum.Call {
  get inputs(): MakeItemCall__Inputs {
    return new MakeItemCall__Inputs(this);
  }

  get outputs(): MakeItemCall__Outputs {
    return new MakeItemCall__Outputs(this);
  }
}

export class MakeItemCall__Inputs {
  _call: MakeItemCall;

  constructor(call: MakeItemCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MakeItemCall__Outputs {
  _call: MakeItemCall;

  constructor(call: MakeItemCall) {
    this._call = call;
  }
}

export class PurchaseItemCall extends ethereum.Call {
  get inputs(): PurchaseItemCall__Inputs {
    return new PurchaseItemCall__Inputs(this);
  }

  get outputs(): PurchaseItemCall__Outputs {
    return new PurchaseItemCall__Outputs(this);
  }
}

export class PurchaseItemCall__Inputs {
  _call: PurchaseItemCall;

  constructor(call: PurchaseItemCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PurchaseItemCall__Outputs {
  _call: PurchaseItemCall;

  constructor(call: PurchaseItemCall) {
    this._call = call;
  }
}
